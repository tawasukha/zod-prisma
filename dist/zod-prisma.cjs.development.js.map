{"version":3,"file":"zod-prisma.cjs.development.js","sources":["../src/config.ts","../src/util.ts","../src/docs.ts","../src/types.ts","../src/generator.ts","../src/index.ts"],"sourcesContent":["import { z } from 'zod'\n\nconst configBoolean = z.enum(['true', 'false']).transform((arg) => JSON.parse(arg))\n\nexport const configSchema = z.object({\n\trelationModel: configBoolean.default('true').or(z.literal('default')),\n\tmodelSuffix: z.string().default('_model'),\n\tmodelCase: z.enum(['PascalCase', 'camelCase']).default('PascalCase'),\n\tuseDecimalJs: configBoolean.default('false'),\n\timports: z.string().optional(),\n\tprismaJsonNullability: configBoolean.default('true'),\n})\n\nexport type Config = z.infer<typeof configSchema>\n\nexport type PrismaOptions = {\n\tschemaPath: string\n\toutputPath: string\n\tclientPath: string\n}\n\nexport type Names = {\n\tmodel: string\n\trelated: string\n}\n","import { DMMF } from '@prisma/generator-helper'\nimport type { CodeBlockWriter } from 'ts-morph'\nimport { Config } from './config'\n\nexport const writeArray = (writer: CodeBlockWriter, array: string[], newLine = true) =>\n\tarray.forEach((line) => writer.write(line).conditionalNewLine(newLine))\n\nexport const useModelNames = ({ modelCase, modelSuffix, relationModel }: Config) => {\n\tconst formatModelName = (name: string, prefix = '') => {\n\t\tif (modelCase === 'camelCase') {\n\t\t\tname = name.slice(0, 1).toLowerCase() + name.slice(1)\n\t\t}\n\t\treturn `${prefix}${name}${modelSuffix}`\n\t}\n\n\treturn {\n\t\tmodelName: (name: string) => formatModelName(name, relationModel === 'default' ? '_' : ''),\n\t\trelatedModelName: (name: string) =>\n\t\t\tformatModelName(\n\t\t\t\trelationModel === 'default' ? name.toString() : `related_${name.toString()}`\n\t\t\t),\n\t}\n}\n\nexport const needsRelatedModel = (model: DMMF.Model, config: Config) =>\n\tmodel.fields.some((field) => field.kind === 'object') && config.relationModel !== false\n\nexport const chunk = <T extends any[]>(input: T, size: number): T[] => {\n\treturn input.reduce((arr, item, idx) => {\n\t\treturn idx % size === 0\n\t\t\t? [...arr, [item]]\n\t\t\t: [...arr.slice(0, -1), [...arr.slice(-1)[0], item]]\n\t}, [])\n}\n\nexport const dotSlash = (input: string) => {\n\tconst converted = input\n\t\t.replace(/^\\\\\\\\\\?\\\\/, '')\n\t\t.replace(/\\\\/g, '/')\n\t\t.replace(/\\/\\/+/g, '/')\n\n\tif (converted.includes(`/node_modules/`)) return converted.split(`/node_modules/`).slice(-1)[0]\n\n\tif (converted.startsWith(`../`)) return converted\n\n\treturn './' + converted\n}\n","import { ArrayTree, parse, stringify } from 'parenthesis'\nimport { chunk } from './util'\n\nexport const getJSDocs = (docString?: string) => {\n\tconst lines: string[] = []\n\n\tif (docString) {\n\t\tconst docLines = docString.split('\\n').filter((dL) => !dL.trimStart().startsWith('@zod'))\n\n\t\tif (docLines.length) {\n\t\t\tlines.push('/**')\n\t\t\tdocLines.forEach((dL) => lines.push(` * ${dL}`))\n\t\t\tlines.push(' */')\n\t\t}\n\t}\n\n\treturn lines\n}\n\nexport const getZodDocElements = (docString: string) =>\n\tdocString\n\t\t.split('\\n')\n\t\t.filter((line) => line.trimStart().startsWith('@zod'))\n\t\t.map((line) => line.trimStart().slice(4))\n\t\t.flatMap((line) =>\n\t\t\t// Array.from(line.matchAll(/\\.([^().]+\\(.*?\\))/g), (m) => m.slice(1)).flat()\n\t\t\tchunk(parse(line), 2)\n\t\t\t\t.slice(0, -1)\n\t\t\t\t.map(\n\t\t\t\t\t([each, contents]) =>\n\t\t\t\t\t\t(each as string).replace(/\\)?\\./, '') +\n\t\t\t\t\t\t`${stringify(contents as ArrayTree)})`\n\t\t\t\t)\n\t\t)\n\nexport const computeCustomSchema = (docString: string) => {\n\treturn getZodDocElements(docString)\n\t\t.find((modifier) => modifier.startsWith('custom('))\n\t\t?.slice(7)\n\t\t.slice(0, -1)\n}\n\nexport const computeModifiers = (docString: string) => {\n\treturn getZodDocElements(docString).filter((each) => !each.startsWith('custom('))\n}\n","import type { DMMF } from '@prisma/generator-helper'\nimport { computeCustomSchema, computeModifiers } from './docs'\n\nexport const getZodConstructor = (\n\tfield: DMMF.Field,\n\tgetRelatedModelName = (name: string) => name.toString()\n) => {\n\tlet zodType = 'z.unknown()'\n\tlet extraModifiers: string[] = ['']\n\tif (field.kind === 'scalar') {\n\t\tswitch (field.type) {\n\t\t\tcase 'String':\n\t\t\t\tzodType = 'z.string()'\n\t\t\t\tif (field.isRequired) {\n\t\t\t\t\textraModifiers.push('min(1)')\n\t\t\t\t}\n\t\t\t\tbreak\n\t\t\tcase 'Int':\n\t\t\t\tzodType = 'z.number()'\n\t\t\t\textraModifiers.push('int()')\n\t\t\t\tbreak\n\t\t\tcase 'BigInt':\n\t\t\t\tzodType = 'z.bigint()'\n\t\t\t\tbreak\n\t\t\tcase 'DateTime':\n\t\t\t\tzodType =\n\t\t\t\t\t'z.preprocess((arg) => typeof arg == \"string\" || arg instanceof Date ? new Date(arg) : arg, z.date())'\n\t\t\t\tbreak\n\t\t\tcase 'Float':\n\t\t\t\tzodType = 'z.number()'\n\t\t\t\tbreak\n\t\t\tcase 'Decimal':\n\t\t\t\tzodType = 'z.number()'\n\t\t\t\tbreak\n\t\t\tcase 'Json':\n\t\t\t\tzodType = 'z.record(z.any())'\n\t\t\t\tbreak\n\t\t\tcase 'Boolean':\n\t\t\t\tzodType = 'z.boolean()'\n\t\t\t\tbreak\n\t\t\t// TODO: Proper type for bytes fields\n\t\t\tcase 'Bytes':\n\t\t\t\tzodType = 'z.unknown()'\n\t\t\t\tbreak\n\t\t}\n\t} else if (field.kind === 'enum') {\n\t\tzodType = `z.nativeEnum(${field.type})`\n\t} else if (field.kind === 'object') {\n\t\tzodType = getRelatedModelName(field.type)\n\t}\n\n\tif (field.isList) {\n\t\textraModifiers.push('array()')\n\t}\n\tif (field.documentation) {\n\t\tzodType = computeCustomSchema(field.documentation) ?? zodType\n\t\textraModifiers.push(...computeModifiers(field.documentation))\n\t}\n\tif (!field.isRequired || field.isUpdatedAt || field.hasDefaultValue) {\n\t\textraModifiers.push('optional()')\n\t\tif (!field.isId && !field.hasDefaultValue && !field.isList && !field.isUpdatedAt ) {\n\t\t\textraModifiers.push('nullable()')\n\t\t}\n\t}\n\n\treturn `${zodType}${extraModifiers.join('.')}`\n}\n","import path from 'path'\nimport { DMMF } from '@prisma/generator-helper'\nimport {\n\tImportDeclarationStructure,\n\tSourceFile,\n\tStructureKind,\n\tVariableDeclarationKind,\n} from 'ts-morph'\nimport { Config, PrismaOptions } from './config'\nimport { dotSlash, needsRelatedModel, useModelNames, writeArray } from './util'\nimport { getJSDocs } from './docs'\nimport { getZodConstructor } from './types'\n\nexport const writeImportsForModel = (\n\tmodel: DMMF.Model,\n\tsourceFile: SourceFile,\n\tconfig: Config,\n\t{ schemaPath, outputPath, clientPath }: PrismaOptions\n) => {\n\tconst { modelName } = useModelNames(config)\n\tconst importList: ImportDeclarationStructure[] = [\n\t\t{\n\t\t\tkind: StructureKind.ImportDeclaration,\n\t\t\tnamespaceImport: 'z',\n\t\t\tmoduleSpecifier: 'zod',\n\t\t},\n\t]\n\n\tif (config.imports) {\n\t\timportList.push({\n\t\t\tkind: StructureKind.ImportDeclaration,\n\t\t\tnamespaceImport: 'imports',\n\t\t\tmoduleSpecifier: dotSlash(\n\t\t\t\tpath.relative(outputPath, path.resolve(path.dirname(schemaPath), config.imports))\n\t\t\t),\n\t\t})\n\t}\n\n\tconst enumFields = model.fields.filter((f) => f.kind === 'enum')\n\tconst relationFields = model.fields.filter((f) => f.kind === 'object')\n\tconst relativePath = path.relative(outputPath, clientPath)\n\n\tif (enumFields.length > 0) {\n\t\timportList.push({\n\t\t\tkind: StructureKind.ImportDeclaration,\n\t\t\tisTypeOnly: enumFields.length === 0,\n\t\t\tmoduleSpecifier: dotSlash(relativePath),\n\t\t\tdefaultImport: 'prisma',\n\t\t})\n\t}\n\n\tif (config.relationModel !== false && relationFields.length > 0) {\n\t\tconst filteredFields = relationFields.filter((f) => f.type !== model.name)\n\n\t\tif (filteredFields.length > 0) {\n\t\t\timportList.push({\n\t\t\t\tkind: StructureKind.ImportDeclaration,\n\t\t\t\tmoduleSpecifier: './index',\n\t\t\t\tnamedImports: Array.from(\n\t\t\t\t\tnew Set(\n\t\t\t\t\t\tfilteredFields.flatMap((f) => [\n\t\t\t\t\t\t\t`${modelName(f.type)}`,\n\t\t\t\t\t\t])\n\t\t\t\t\t)\n\t\t\t\t),\n\t\t\t})\n\t\t}\n\t}\n\n\tsourceFile.addImportDeclarations(importList)\n}\n\nexport const generateSchemaForModel = (\n\tmodel: DMMF.Model,\n\tsourceFile: SourceFile,\n\tconfig: Config,\n\t_prismaOptions: PrismaOptions\n) => {\n\tconst { modelName } = useModelNames(config)\n\n\tsourceFile.addVariableStatement({\n\t\tdeclarationKind: VariableDeclarationKind.Const,\n\t\tisExported: true,\n\t\tleadingTrivia: (writer) => writer.blankLineIfLastNot(),\n\t\tdeclarations: [\n\t\t\t{\n\t\t\t\tname: modelName(model.name),\n\t\t\t\tinitializer(writer) {\n\t\t\t\t\twriter\n\t\t\t\t\t\t.write('z.object(')\n\t\t\t\t\t\t.inlineBlock(() => {\n\t\t\t\t\t\t\tmodel.fields\n\t\t\t\t\t\t\t\t.filter((f) => f.kind !== 'object')\n\t\t\t\t\t\t\t\t.forEach((field) => {\n\t\t\t\t\t\t\t\t\twriteArray(writer, getJSDocs(field.documentation))\n\t\t\t\t\t\t\t\t\twriter\n\t\t\t\t\t\t\t\t\t\t.write(`${field.name}: ${getZodConstructor(field)}`)\n\t\t\t\t\t\t\t\t\t\t.write(',')\n\t\t\t\t\t\t\t\t\t\t.newLine()\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.write(')')\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t})\n}\n\nexport const generateRelatedSchemaForModel = (\n\tmodel: DMMF.Model,\n\tsourceFile: SourceFile,\n\tconfig: Config,\n\t_prismaOptions: PrismaOptions\n) => {\n\tconst { modelName, relatedModelName } = useModelNames(config)\n\n\tconst relationFields = model.fields.filter((f) => f.kind === 'object')\n\n\tsourceFile.addStatements((writer) =>\n\t\twriteArray(writer, [\n\t\t\t'',\n\t\t\t'// NOTE: Lazy required in case of potential circular dependencies within schema',\n\t\t\t'',\n\t\t])\n\t)\n\n\tsourceFile.addVariableStatement({\n\t\tdeclarationKind: VariableDeclarationKind.Const,\n\t\tisExported: true,\n\t\tdeclarations: [\n\t\t\t{\n\t\t\t\tname: relatedModelName(model.name),\n\t\t\t\ttype:\"\",\n\t\t\t\tinitializer(writer) {\n\t\t\t\t\twriter\n\t\t\t\t\t\t.write(`z.lazy(() => ${modelName(model.name)}.extend(`)\n\t\t\t\t\t\t.inlineBlock(() => {\n\t\t\t\t\t\t\trelationFields.forEach((field) => {\n\t\t\t\t\t\t\t\twriteArray(writer, getJSDocs(field.documentation))\n\n\t\t\t\t\t\t\t\twriter\n\t\t\t\t\t\t\t\t\t.write(\n\t\t\t\t\t\t\t\t\t\t`${field.name}: ${getZodConstructor(\n\t\t\t\t\t\t\t\t\t\t\tfield,\n\t\t\t\t\t\t\t\t\t\t\tmodelName\n\t\t\t\t\t\t\t\t\t\t)}`\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t.write(',')\n\t\t\t\t\t\t\t\t\t.newLine()\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.write('))')\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t})\n}\n\nexport const populateModelFile = (\n\tmodel: DMMF.Model,\n\tsourceFile: SourceFile,\n\tconfig: Config,\n\tprismaOptions: PrismaOptions\n) => {\n\twriteImportsForModel(model, sourceFile, config, prismaOptions)\n\tgenerateSchemaForModel(model, sourceFile, config, prismaOptions)\n\tif (needsRelatedModel(model, config))\n\t\tgenerateRelatedSchemaForModel(model, sourceFile, config, prismaOptions)\n}\n\nexport const generateBarrelFile = (models: DMMF.Model[], indexFile: SourceFile) => {\n\tmodels.forEach((model) =>\n\t\tindexFile.addExportDeclaration({\n\t\t\tmoduleSpecifier: `./${model.name.toLowerCase()}`,\n\t\t})\n\t)\n}\n","// @ts-ignore Importing package.json for automated synchronization of version numbers\nimport { version } from '../package.json'\n\nimport { generatorHandler } from '@prisma/generator-helper'\nimport { SemicolonPreference } from 'typescript'\nimport { configSchema, PrismaOptions } from './config'\nimport { populateModelFile, generateBarrelFile } from './generator'\nimport { Project } from 'ts-morph'\n\ngeneratorHandler({\n\tonManifest() {\n\t\treturn {\n\t\t\tversion,\n\t\t\tprettyName: 'Zod Schemas',\n\t\t\tdefaultOutput: 'zod',\n\t\t}\n\t},\n\tonGenerate(options) {\n\t\tconst project = new Project()\n\n\t\tconst models = options.dmmf.datamodel.models\n\n\t\tconst { schemaPath } = options\n\t\tconst outputPath = options.generator.output!.value\n\t\tconst clientPath = options.otherGenerators.find(\n\t\t\t(each) => each.provider.value === 'prisma-client-js'\n\t\t)!.output!.value!\n\n\t\tconst results = configSchema.safeParse(options.generator.config)\n\t\tif (!results.success)\n\t\t\tthrow new Error(\n\t\t\t\t'Incorrect config provided. Please check the values you provided and try again.'\n\t\t\t)\n\n\t\tconst config = results.data\n\t\tconst prismaOptions: PrismaOptions = {\n\t\t\tclientPath,\n\t\t\toutputPath,\n\t\t\tschemaPath,\n\t\t}\n\n\t\tconst indexFile = project.createSourceFile(\n\t\t\t`${outputPath}/index.ts`,\n\t\t\t{},\n\t\t\t{ overwrite: true }\n\t\t)\n\n\t\tgenerateBarrelFile(models, indexFile)\n\n\t\tindexFile.formatText({\n\t\t\tindentSize: 2,\n\t\t\tconvertTabsToSpaces: true,\n\t\t\tsemicolons: SemicolonPreference.Remove,\n\t\t})\n\n\t\tmodels.forEach((model) => {\n\t\t\tconst sourceFile = project.createSourceFile(\n\t\t\t\t`${outputPath}/${model.name.toLowerCase()}.ts`,\n\t\t\t\t{},\n\t\t\t\t{ overwrite: true }\n\t\t\t)\n\n\t\t\tpopulateModelFile(model, sourceFile, config, prismaOptions)\n\n\t\t\tsourceFile.formatText({\n\t\t\t\tindentSize: 2,\n\t\t\t\tconvertTabsToSpaces: true,\n\t\t\t\tsemicolons: SemicolonPreference.Remove,\n\t\t\t})\n\t\t})\n\n\t\treturn project.save()\n\t},\n})\n"],"names":["configBoolean","z","enum","transform","arg","JSON","parse","configSchema","object","relationModel","default","or","literal","modelSuffix","string","modelCase","useDecimalJs","imports","optional","prismaJsonNullability","writeArray","writer","array","newLine","forEach","line","write","conditionalNewLine","useModelNames","formatModelName","name","prefix","slice","toLowerCase","modelName","relatedModelName","toString","needsRelatedModel","model","config","fields","some","field","kind","chunk","input","size","reduce","arr","item","idx","dotSlash","converted","replace","includes","split","startsWith","getJSDocs","docString","lines","docLines","filter","dL","trimStart","length","push","getZodDocElements","map","flatMap","each","contents","stringify","computeCustomSchema","find","modifier","computeModifiers","getZodConstructor","getRelatedModelName","zodType","extraModifiers","type","isRequired","isList","documentation","isUpdatedAt","hasDefaultValue","isId","join","writeImportsForModel","sourceFile","schemaPath","outputPath","clientPath","importList","StructureKind","ImportDeclaration","namespaceImport","moduleSpecifier","path","relative","resolve","dirname","enumFields","f","relationFields","relativePath","isTypeOnly","defaultImport","filteredFields","namedImports","Array","from","Set","addImportDeclarations","generateSchemaForModel","_prismaOptions","addVariableStatement","declarationKind","VariableDeclarationKind","Const","isExported","leadingTrivia","blankLineIfLastNot","declarations","initializer","inlineBlock","generateRelatedSchemaForModel","addStatements","populateModelFile","prismaOptions","generateBarrelFile","models","indexFile","addExportDeclaration","generatorHandler","onManifest","version","prettyName","defaultOutput","onGenerate","options","project","Project","dmmf","datamodel","generator","output","value","otherGenerators","provider","results","safeParse","success","Error","data","createSourceFile","overwrite","formatText","indentSize","convertTabsToSpaces","semicolons","SemicolonPreference","Remove","save"],"mappings":"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"}